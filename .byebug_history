c!
c
JSON.parse(response.body)
c
c!
JSON.parse(response.body)
c
inventory_item.reload.quantity
c
inventory_item.reload.quantity
c!
JSON.parse(response.body)
c!
e
c!
e
c!
c
c!
c
c!
JSON.parse(response.body)
c
e
c!
c
inventory_item
c!
e
c!
c
low_stock_threshold
quantity
c
self
  update_column(:low_stock_alert_sent, true)
c
InventoryItem.last
c!
OrderStatusLog.create!(order: order, status: status, created_at: created_at)
c
c!
e
c
c!
e
c
e
c
c!
c
c!
c
quantity <= low_stock_threshold && !low_stock_alert_sent
self
c
self
c
self
c
self
c
self
c
self
c!
c
self
quantity
c!
Order.includes(:order_items).find_by(id: self.id)
Order.includes(:order_items).find_by(order_id: self.id)
Order.includes(:order_items).find_by(id: self.id)
c
c!
order.id
Order.first.id
Order.count
c!
c
c!
json
c!
c
JSON.parse(response.body)
c
JSON.parse(response.body)
c!
JSON.parse(response.body)
c
JSON.parse(response.body)
c!
JSON.parse(response.body)
c
JSON.parse(response.body)
c!
e.message
e
c!
c
updated_rows
c
c!
c
inventory_item_id
quantity
c
items
c
result
c
e
e.backtrace.join("\n")
e
c!
c
e
c
JSON.parse(response.body)
c
c!
c
e
c
JSON.parse(response.body)
c!
c
order.joins(:order_items)
order.includes(:order_items)
inventory_item_id
order
c!
json
c!
JSON.parse(response.body)
response
c!
c
c!
JSON.parse(response.body)
c
@customer.destroy
c
e
e.backtrace.join("\n")
c!
JSON.parse(response.body)
